// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
const tg = window.Telegram.WebApp;
tg.expand();
tg.enableClosingConfirmation();

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let currentState = {
    screen: 'upload',
    selectedFile: null,
    currentRating: 0,
    currentPhoto: null
};

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const elements = {
    uploadScreen: document.getElementById('upload-screen'),
    rateScreen: document.getElementById('rate-screen'),
    thanksScreen: document.getElementById('thanks-screen'),
    uploadArea: document.getElementById('upload-area'),
    photoInput: document.getElementById('photo-input'),
    uploadBtn: document.getElementById('upload-btn'),
    currentPhoto: document.getElementById('current-photo'),
    stars: document.getElementById('stars'),
    ratingValue: document.getElementById('rating-value'),
    submitRating: document.getElementById('submit-rating'),
    rateAnother: document.getElementById('rate-another'),
    statusBar: document.getElementById('status-bar')
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function initApp() {
    console.log("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è");
    console.log("üì± User ID:", tg.initDataUnsafe.user.id);
    
    setupEventListeners();
    showScreen('upload');
    updateStatusBar('–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
    loadRandomPhoto();
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É Telegram
    elements.uploadArea.addEventListener('click', () => {
        console.log("üì± –ó–∞–ø—Ä–æ—Å –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ Telegram");
        tg.showPopup({
            title: '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ',
            message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏ –∏–ª–∏ —Å–¥–µ–ª–∞–π—Ç–µ –Ω–æ–≤–æ–µ',
            buttons: [
                {id: 'gallery', type: 'default', text: 'üìÅ –ì–∞–ª–µ—Ä–µ—è'},
                {id: 'camera', type: 'default', text: 'üì∑ –ö–∞–º–µ—Ä–∞'},
                {type: 'cancel'}
            ]
        }, (buttonId) => {
            if (buttonId === 'gallery') {
                selectFromGallery();
            } else if (buttonId === 'camera') {
                takePhoto();
            }
        });
    });

    // –û—Ü–µ–Ω–∫–∞ —Ñ–æ—Ç–æ
    elements.stars.addEventListener('click', handleStarClick);
    elements.submitRating.addEventListener('click', handleRatingSubmit);
    elements.rateAnother.addEventListener('click', () => {
        showScreen('upload');
        loadRandomPhoto();
    });
}

// –í—ã–±–æ—Ä —Ñ–æ—Ç–æ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏ —á–µ—Ä–µ–∑ Telegram
function selectFromGallery() {
    tg.showPhotoPicker({}, (filePaths) => {
        if (filePaths && filePaths.length > 0) {
            processTelegramFile(filePaths[0], 'gallery');
        }
    });
}

// –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ –∫–∞–º–µ—Ä—É
function takePhoto() {
    tg.openCamera({}, (filePath) => {
        if (filePath) {
            processTelegramFile(filePath, 'camera');
        }
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –∏–∑ Telegram
function processTelegramFile(filePath, source) {
    console.log("üìÅ –§–∞–π–ª –∏–∑ Telegram:", filePath, source);
    updateStatusBar('üì° –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ...');
    
    // –°–æ–∑–¥–∞–µ–º mock —Ñ–∞–π–ª –¥–ª—è –¥–µ–º–æ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å tg.downloadFile)
    const mockFile = {
        name: source === 'camera' ? 'photo.jpg' : 'gallery_image.jpg',
        size: 1024 * 1024, // 1MB
        type: 'image/jpeg',
        source: source
    };
    
    currentState.selectedFile = mockFile;
    elements.uploadBtn.disabled = false;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
    elements.uploadArea.innerHTML = `
        <div style="text-align: center;">
            <div style="font-size: 48px; margin-bottom: 10px;">üì∏</div>
            <p style="color: #666;">${source === 'camera' ? '–§–æ—Ç–æ —Å –∫–∞–º–µ—Ä—ã' : '–§–æ—Ç–æ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏'}</p>
            <small>–ì–æ—Ç–æ–≤–æ –∫ –∑–∞–≥—Ä—É–∑–∫–µ</small>
        </div>
    `;
    
    updateStatusBar('‚úÖ –§–æ—Ç–æ –≥–æ—Ç–æ–≤–æ –∫ –∑–∞–≥—Ä—É–∑–∫–µ');
}

// –ü–æ–∫–∞–∑ —ç–∫—Ä–∞–Ω–∞
function showScreen(screenName) {
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.remove('active');
    });

    switch(screenName) {
        case 'upload':
            elements.uploadScreen.classList.add('active');
            break;
        case 'rate':
            elements.rateScreen.classList.add('active');
            break;
        case 'thanks':
            elements.thanksScreen.classList.add('active');
            break;
    }

    currentState.screen = screenName;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å –±–∞—Ä–∞
function updateStatusBar(message, isError = false) {
    elements.statusBar.textContent = message;
    elements.statusBar.style.color = isError ? '#e74c3c' : '#666';
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–æ—Ç–æ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
async function loadRandomPhoto() {
    try {
        updateStatusBar('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –¥–ª—è –æ—Ü–µ–Ω–∫–∏...');
        
        const response = await fetch('http://localhost:5000/get_photo');
        const data = await response.json();
        
        if (data.success && data.photo) {
            currentState.currentPhoto = data.photo;
            elements.currentPhoto.src = data.photo.photo_url;
            updateStatusBar('‚úÖ –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ! –û—Ü–µ–Ω–∏—Ç–µ –µ–≥–æ');
        } else {
            throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ç–æ');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ:', error);
        updateStatusBar('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Ñ–æ—Ç–æ', true);
        
        // Fallback
        currentState.currentPhoto = {
            id: 'fallback-photo',
            photo_url: 'https://via.placeholder.com/500x500?text=Rate+This+Photo',
            user_id: 'demo-user'
        };
        elements.currentPhoto.src = currentState.currentPhoto.photo_url;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
async function handleUpload() {
    if (!currentState.selectedFile) return;

    elements.uploadBtn.disabled = true;
    updateStatusBar('üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ...');

    try {
        // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç tg.downloadFile + FormData
        // –°–µ–π—á–∞—Å –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-—Ä–µ–∂–∏–º
        
        const formData = new FormData();
        formData.append('userId', tg.initDataUnsafe.user.id.toString());
        
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –∑–∞–≥—Ä—É–∑–∫–∏
        await new Promise(resolve => setTimeout(resolve, 1500));
        
        // –î–µ–º–æ-–æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        const mockResponse = {
            success: true,
            photo: {
                id: 'demo-' + Date.now(),
                user_id: tg.initDataUnsafe.user.id.toString(),
                photo_url: 'https://via.placeholder.com/500x500/4CAF50/FFFFFF?text=Upload+Success',
                timestamp: new Date().toISOString(),
                total_ratings: 0,
                average_rating: 0
            }
        };
        
        if (mockResponse.success) {
            updateStatusBar('‚úÖ –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!');
            
            setTimeout(() => {
                showScreen('rate');
                loadRandomPhoto();
            }, 1000);
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
        updateStatusBar('‚úÖ –§–æ—Ç–æ "–∑–∞–≥—Ä—É–∂–µ–Ω–æ" (–¥–µ–º–æ-—Ä–µ–∂–∏–º)');
        
        // –í—Å–µ —Ä–∞–≤–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ü–µ–Ω–∫–µ
        setTimeout(() => {
            showScreen('rate');
            loadRandomPhoto();
        }, 1000);
    }
}

// –û—Ü–µ–Ω–∫–∞ —Ñ–æ—Ç–æ
function handleStarClick(e) {
    if (e.target.classList.contains('star')) {
        const rating = parseInt(e.target.dataset.value);
        currentState.currentRating = rating;

        document.querySelectorAll('.star').forEach((star, index) => {
            star.classList.toggle('active', index < rating);
        });

        elements.ratingValue.textContent = `${rating}/10`;
        elements.submitRating.disabled = false;
    }
}

async function handleRatingSubmit() {
    if (!currentState.currentRating || !currentState.currentPhoto) return;

    elements.submitRating.disabled = true;
    updateStatusBar('üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É...');

    try {
        const response = await fetch('http://localhost:5000/rate', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                photoId: currentState.currentPhoto.id,
                rating: currentState.currentRating,
                userId: tg.initDataUnsafe.user.id.toString()
            })
        });

        const data = await response.json();

        if (data.success) {
            showScreen('thanks');
            updateStatusBar('‚úÖ –û—Ü–µ–Ω–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!');
        } else {
            throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ü–µ–Ω–∫–∏');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏:', error);
        updateStatusBar('‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!');
        showScreen('thanks');
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', initApp);

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –¥–µ–±–∞–≥–∞
window.debugApp = {
    simulateUpload: () => {
        currentState.selectedFile = { name: 'test.jpg', size: 1024000 };
        elements.uploadBtn.disabled = false;
        elements.uploadArea.innerHTML = `
            <div style="text-align: center;">
                <div style="font-size: 48px;">üì∏</div>
                <p>–¢–µ—Å—Ç–æ–≤–æ–µ —Ñ–æ—Ç–æ</p>
            </div>
        `;
        updateStatusBar('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Ñ–æ—Ç–æ –≥–æ—Ç–æ–≤–æ');
    },
    skipToRate: () => {
        showScreen('rate');
        loadRandomPhoto();
    }
};
