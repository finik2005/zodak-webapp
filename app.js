// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
const tg = window.Telegram.WebApp;
tg.expand();
tg.enableClosingConfirmation();

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let currentState = {
    screen: 'upload',
    selectedFile: null,
    currentRating: 0,
    currentPhoto: null,
    uploadedPhotos: []
};

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const elements = {
    uploadScreen: document.getElementById('upload-screen'),
    rateScreen: document.getElementById('rate-screen'),
    thanksScreen: document.getElementById('thanks-screen'),
    uploadArea: document.getElementById('upload-area'),
    photoInput: document.getElementById('photo-input'),
    uploadBtn: document.getElementById('upload-btn'),
    currentPhoto: document.getElementById('current-photo'),
    stars: document.getElementById('stars'),
    ratingValue: document.getElementById('rating-value'),
    submitRating: document.getElementById('submit-rating'),
    rateAnother: document.getElementById('rate-another'),
    statusBar: document.getElementById('status-bar')
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function initApp() {
    console.log("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è");
    setupEventListeners();
    showScreen('upload');
    updateStatusBar('–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ
    elements.uploadArea.addEventListener('click', () => elements.photoInput.click());
    elements.uploadArea.addEventListener('dragover', handleDragOver);
    elements.uploadArea.addEventListener('drop', handleDrop);
    elements.photoInput.addEventListener('change', handleFileSelect);
    elements.uploadBtn.addEventListener('click', handleUpload);

    // –û—Ü–µ–Ω–∫–∞ —Ñ–æ—Ç–æ
    elements.stars.addEventListener('click', handleStarClick);
    elements.submitRating.addEventListener('click', handleRatingSubmit);
    elements.rateAnother.addEventListener('click', () => {
        showScreen('upload');
        updateStatusBar('–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
    });
}

// –ü–æ–∫–∞–∑ —ç–∫—Ä–∞–Ω–∞
function showScreen(screenName) {
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.remove('active');
    });

    switch(screenName) {
        case 'upload':
            elements.uploadScreen.classList.add('active');
            break;
        case 'rate':
            elements.rateScreen.classList.add('active');
            loadRandomPhoto();
            break;
        case 'thanks':
            elements.thanksScreen.classList.add('active');
            break;
    }

    currentState.screen = screenName;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å –±–∞—Ä–∞
function updateStatusBar(message, isError = false) {
    elements.statusBar.textContent = message;
    elements.statusBar.style.color = isError ? '#e74c3c' : '#666';
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–æ—Ç–æ
async function loadRandomPhoto() {
    try {
        updateStatusBar('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –¥–ª—è –æ—Ü–µ–Ω–∫–∏...');
        
        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ —Å —Å–µ—Ä–≤–µ—Ä–∞
        try {
            const response = await fetch('http://localhost:5000/get_photo');
            const data = await response.json();
            
            if (data.success && data.photo) {
                currentState.currentPhoto = data.photo;
                elements.currentPhoto.src = data.photo.photo_url;
                updateStatusBar('‚úÖ –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ! –û—Ü–µ–Ω–∏—Ç–µ –µ–≥–æ');
                return;
            }
        } catch (serverError) {
            console.log('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ');
        }
        
        // Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ
        if (currentState.uploadedPhotos.length > 0) {
            const randomIndex = Math.floor(Math.random() * currentState.uploadedPhotos.length);
            currentState.currentPhoto = currentState.uploadedPhotos[randomIndex];
            elements.currentPhoto.src = currentState.currentPhoto.photo_url;
            updateStatusBar('‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!');
        } else {
            // –î–µ–º–æ —Ñ–æ—Ç–æ –µ—Å–ª–∏ –Ω–µ—Ç —Å–≤–æ–∏—Ö
            currentState.currentPhoto = {
                id: 'demo_photo',
                photo_url: 'data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="500" height="500"><rect width="500" height="500" fill="#4CAF50"/><text x="250" y="250" font-family="Arial" font-size="20" fill="white" text-anchor="middle">–ó–∞–≥—Ä—É–∑–∏ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ!</text></svg>',
                user_id: 'system'
            };
            elements.currentPhoto.src = currentState.currentPhoto.photo_url;
            updateStatusBar('‚úÖ –î–µ–º–æ —Ñ–æ—Ç–æ –≥–æ—Ç–æ–≤–æ!');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ:', error);
        updateStatusBar('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ', true);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ drag and drop
function handleDragOver(e) {
    e.preventDefault();
    elements.uploadArea.classList.add('dragover');
}

function handleDrop(e) {
    e.preventDefault();
    elements.uploadArea.classList.remove('dragover');
    
    const files = e.dataTransfer.files;
    if (files.length > 0) {
        processFile(files[0]);
    }
}

function handleFileSelect(e) {
    if (e.target.files.length > 0) {
        processFile(e.target.files[0]);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
function processFile(file) {
    if (!file.type.startsWith('image/')) {
        updateStatusBar('‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!', true);
        return;
    }

    if (file.size > 10 * 1024 * 1024) {
        updateStatusBar('‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å. 10MB', true);
        return;
    }

    currentState.selectedFile = file;
    elements.uploadBtn.disabled = false;
    
    const reader = new FileReader();
    reader.onload = function(e) {
        elements.uploadArea.innerHTML = `
            <div style="text-align: center;">
                <img src="${e.target.result}" style="max-width: 100%; max-height: 200px; border-radius: 10px;">
                <p style="margin-top: 10px; color: #666;">${file.name}</p>
                <small>${(file.size / 1024 / 1024).toFixed(2)} MB</small>
            </div>
        `;
    };
    reader.readAsDataURL(file);

    updateStatusBar('‚úÖ –§–æ—Ç–æ –≥–æ—Ç–æ–≤–æ –∫ –∑–∞–≥—Ä—É–∑–∫–µ');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ
async function handleUpload() {
    if (!currentState.selectedFile) return;

    elements.uploadBtn.disabled = true;
    updateStatusBar('üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ...');

    const reader = new FileReader();
    reader.onload = async function(e) {
        const userId = tg.initDataUnsafe?.user?.id?.toString() || 'user_' + Date.now();
        const photoDataUrl = e.target.result;
        
        try {
            // –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            const formData = new FormData();
            formData.append('photo', currentState.selectedFile);
            formData.append('userId', userId);
            
            const response = await fetch('http://localhost:5000/upload', {
                method: 'POST',
                body: formData
            });
            
            const data = await response.json();
            
            if (data.success) {
                updateStatusBar('‚úÖ –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä!');
            } else {
                throw new Error('Server error');
            }
            
        } catch (error) {
            console.log('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ');
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
            const localPhoto = {
                id: 'local_' + Date.now(),
                user_id: userId,
                photo_url: photoDataUrl,
                filename: currentState.selectedFile.name,
                timestamp: new Date().toISOString(),
                total_ratings: 0,
                average_rating: 0
            };
            
            currentState.uploadedPhotos.push(localPhoto);
            updateStatusBar('‚úÖ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ!');
        }
        
        // –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ü–µ–Ω–∫–µ
        setTimeout(() => {
            showScreen('rate');
        }, 1000);
    };
    
    reader.readAsDataURL(currentState.selectedFile);
}

// –û—Ü–µ–Ω–∫–∞ —Ñ–æ—Ç–æ
function handleStarClick(e) {
    if (e.target.classList.contains('star')) {
        const rating = parseInt(e.target.dataset.value);
        currentState.currentRating = rating;

        document.querySelectorAll('.star').forEach((star, index) => {
            star.classList.toggle('active', index < rating);
        });

        elements.ratingValue.textContent = `${rating}/10`;
        elements.submitRating.disabled = false;
    }
}

async function handleRatingSubmit() {
    if (!currentState.currentRating || !currentState.currentPhoto) return;

    elements.submitRating.disabled = true;
    updateStatusBar('üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É...');

    try {
        // –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const response = await fetch('http://localhost:5000/rate', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                photoId: currentState.currentPhoto.id,
                rating: currentState.currentRating,
                userId: tg.initDataUnsafe?.user?.id?.toString() || 'unknown'
            })
        });
        
        await response.json();
        
    } catch (error) {
        console.log('–û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ');
    }
    
    showScreen('thanks');
    updateStatusBar('‚úÖ –û—Ü–µ–Ω–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!');
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', initApp);
