// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
const tg = window.Telegram.WebApp;
tg.expand();
tg.enableClosingConfirmation();

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let currentState = {
    screen: 'upload',
    selectedFile: null,
    currentRating: 0,
    currentPhoto: null
};

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const elements = {
    uploadScreen: document.getElementById('upload-screen'),
    rateScreen: document.getElementById('rate-screen'),
    thanksScreen: document.getElementById('thanks-screen'),
    uploadArea: document.getElementById('upload-area'),
    photoInput: document.getElementById('photo-input'),
    uploadBtn: document.getElementById('upload-btn'),
    currentPhoto: document.getElementById('current-photo'),
    stars: document.getElementById('stars'),
    ratingValue: document.getElementById('rating-value'),
    submitRating: document.getElementById('submit-rating'),
    rateAnother: document.getElementById('rate-another'),
    statusBar: document.getElementById('status-bar')
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function initApp() {
    console.log("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è");
    console.log("üì± User ID:", tg.initDataUnsafe.user.id);
    
    setupEventListeners();
    showScreen('upload');
    updateStatusBar('–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
    
    // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–æ—Ç–æ
    loadRandomPhoto();
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    console.log("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π");
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ
    elements.uploadArea.addEventListener('click', () => {
        console.log("üìÅ –ö–ª–∏–∫ –ø–æ –æ–±–ª–∞—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏");
        elements.photoInput.click();
    });
    
    elements.uploadArea.addEventListener('dragover', handleDragOver);
    elements.uploadArea.addEventListener('drop', handleDrop);
    elements.photoInput.addEventListener('change', handleFileSelect);
    elements.uploadBtn.addEventListener('click', handleUpload);

    // –û—Ü–µ–Ω–∫–∞ —Ñ–æ—Ç–æ
    elements.stars.addEventListener('click', handleStarClick);
    elements.submitRating.addEventListener('click', handleRatingSubmit);
    elements.rateAnother.addEventListener('click', () => {
        console.log("üîÑ –ó–∞–ø—Ä–æ—Å –µ—â–µ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ");
        showScreen('upload');
        loadRandomPhoto();
    });

    // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    window.addEventListener('error', handleError);
    window.addEventListener('unhandledrejection', handlePromiseRejection);
}

// –ü–æ–∫–∞–∑ —ç–∫—Ä–∞–Ω–∞
function showScreen(screenName) {
    console.log(`üñ•Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω: ${screenName}`);
    
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.remove('active');
    });

    switch(screenName) {
        case 'upload':
            elements.uploadScreen.classList.add('active');
            break;
        case 'rate':
            elements.rateScreen.classList.add('active');
            break;
        case 'thanks':
            elements.thanksScreen.classList.add('active');
            break;
    }

    currentState.screen = screenName;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å –±–∞—Ä–∞
function updateStatusBar(message, isError = false) {
    console.log(isError ? `‚ùå ${message}` : `‚úÖ ${message}`);
    elements.statusBar.textContent = message;
    elements.statusBar.style.color = isError ? '#e74c3c' : '#666';
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–æ—Ç–æ
async function loadRandomPhoto() {
    try {
        updateStatusBar('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –¥–ª—è –æ—Ü–µ–Ω–∫–∏...');
        console.log("üì° –ó–∞–ø—Ä–æ—Å —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–æ—Ç–æ");
        
        const response = await fetch('http://localhost:5000/get_photo', {
            method: 'GET',
            headers: {
                'Accept': 'application/json'
            }
        });

        console.log("üì© –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response.status);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        console.log("üìä –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ:", data);

        if (data.success && data.photo) {
            currentState.currentPhoto = data.photo;
            elements.currentPhoto.src = data.photo.photo_url;
            elements.currentPhoto.onload = () => {
                updateStatusBar('‚úÖ –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ! –û—Ü–µ–Ω–∏—Ç–µ –µ–≥–æ');
            };
        } else {
            throw new Error(data.error || '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ç–æ');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ:', error);
        updateStatusBar('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Ñ–æ—Ç–æ', true);
        
        // Fallback –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–µ —Ñ–æ—Ç–æ
        currentState.currentPhoto = {
            id: 'fallback-photo',
            photo_url: 'https://via.placeholder.com/500x500?text=Example+Photo',
            user_id: 'demo-user',
            total_ratings: 42,
            average_rating: 8.5
        };
        elements.currentPhoto.src = currentState.currentPhoto.photo_url;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ drag and drop
function handleDragOver(e) {
    e.preventDefault();
    elements.uploadArea.classList.add('dragover');
}

function handleDrop(e) {
    e.preventDefault();
    elements.uploadArea.classList.remove('dragover');
    
    const files = e.dataTransfer.files;
    if (files.length > 0) {
        processFile(files[0]);
    }
}

function handleFileSelect(e) {
    if (e.target.files.length > 0) {
        processFile(e.target.files[0]);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
function processFile(file) {
    console.log("üìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞:", file.name);
    
    if (!file.type.startsWith('image/')) {
        updateStatusBar('‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!', true);
        return;
    }

    if (file.size > 10 * 1024 * 1024) {
        updateStatusBar('‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å. 10MB', true);
        return;
    }

    currentState.selectedFile = file;
    elements.uploadBtn.disabled = false;
    
    const reader = new FileReader();
    reader.onload = function(e) {
        elements.uploadArea.innerHTML = `
            <div style="text-align: center;">
                <img src="${e.target.result}" style="max-width: 100%; max-height: 200px; border-radius: 10px;">
                <p style="margin-top: 10px; color: #666;">${file.name}</p>
                <small>${(file.size / 1024 / 1024).toFixed(2)} MB</small>
            </div>
        `;
    };
    reader.readAsDataURL(file);

    updateStatusBar('‚úÖ –§–æ—Ç–æ –≥–æ—Ç–æ–≤–æ –∫ –∑–∞–≥—Ä—É–∑–∫–µ');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ
async function handleUpload() {
    if (!currentState.selectedFile) return;

    elements.uploadBtn.disabled = true;
    updateStatusBar('üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ...');
    console.log("üöÄ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:", currentState.selectedFile.name);

    try {
        const formData = new FormData();
        formData.append('photo', currentState.selectedFile);
        formData.append('userId', tg.initDataUnsafe.user.id.toString());

        console.log("üì® –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...");
        
        const response = await fetch('http://localhost:5000/upload', {
            method: 'POST',
            body: formData
        });

        console.log("üì© –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω. –°—Ç–∞—Ç—É—Å:", response.status);
        
        if (!response.ok) {
            const errorText = await response.text();
            console.error("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", errorText);
            throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
        }

        const data = await response.json();
        console.log("üìä –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:", data);

        if (data.success) {
            updateStatusBar('‚úÖ –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!');
            console.log("üéâ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!");
            
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ü–µ–Ω–∫–µ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
            setTimeout(() => {
                showScreen('rate');
                loadRandomPhoto();
            }, 1000);
            
        } else {
            throw new Error(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        }
        
    } catch (error) {
        console.error('‚ùå –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
        updateStatusBar('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏', true);
        
        // Fallback: –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ü–µ–Ω–∫–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        setTimeout(() => {
            showScreen('rate');
            updateStatusBar('‚ö†Ô∏è –†–µ–∂–∏–º –¥–µ–º–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Ñ–æ—Ç–æ');
            loadRandomPhoto();
        }, 1000);
    }
}

// –û—Ü–µ–Ω–∫–∞ —Ñ–æ—Ç–æ
function handleStarClick(e) {
    if (e.target.classList.contains('star')) {
        const rating = parseInt(e.target.dataset.value);
        currentState.currentRating = rating;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–≤–µ–∑–¥—ã
        document.querySelectorAll('.star').forEach((star, index) => {
            star.classList.toggle('active', index < rating);
        });

        elements.ratingValue.textContent = `${rating}/10`;
        elements.submitRating.disabled = false;
        
        console.log("‚≠ê –í—ã–±—Ä–∞–Ω–∞ –æ—Ü–µ–Ω–∫–∞:", rating);
    }
}

async function handleRatingSubmit() {
    if (!currentState.currentRating || !currentState.currentPhoto) return;

    elements.submitRating.disabled = true;
    updateStatusBar('üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É...');
    console.log("‚≠ê –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ü–µ–Ω–∫–∏:", currentState.currentRating);

    try {
        const response = await fetch('http://localhost:5000/rate', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                photoId: currentState.currentPhoto.id,
                rating: currentState.currentRating,
                userId: tg.initDataUnsafe.user.id.toString()
            })
        });

        console.log("üì© –û—Ç–≤–µ—Ç –æ—Ü–µ–Ω–∫–∏:", response.status);
        
        const data = await response.json();
        console.log("üìä –û—Ç–≤–µ—Ç –æ—Ü–µ–Ω–∫–∏:", data);

        if (data.success) {
            showScreen('thanks');
            updateStatusBar('‚úÖ –û—Ü–µ–Ω–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!');
        } else {
            throw new Error(data.error || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ü–µ–Ω–∫–∏');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ü–µ–Ω–∫–∏:', error);
        updateStatusBar('‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! (—Ä–µ–∂–∏–º –¥–µ–º–æ)');
        showScreen('thanks');
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
function handleError(error) {
    console.error('‚ùå –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    updateStatusBar('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', true);
}

function handlePromiseRejection(event) {
    console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ promise:', event.reason);
    updateStatusBar('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', true);
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', initApp);

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –¥–µ–±–∞–≥–∞
window.debugApp = {
    getState: () => currentState,
    reloadPhoto: () => loadRandomPhoto(),
    showScreen: (screen) => showScreen(screen),
    testUpload: () => {
        console.log("üß™ –¢–µ—Å—Ç–æ–≤—ã–π upload");
        handleUpload();
    }
};

console.log("üîß Debug mode: window.debugApp –¥–æ—Å—Ç—É–ø–µ–Ω");
